Latency
  - the time required to perform some action or to produce some result. Latency is measured in units of time --
    hours, minutes, seconds, nanoseconds or clock periods.
Throughput
  - the number of such actions executed or results produced per unit of time. This is measured in units of whatever is being produced
    (cars, motorcycles, I/O samples, memory words, iterations) per unit of time
Bandwidth
  - the raw capability of a communications channel to move data through that channel.
    Typically measured in bits or bytes per second.

what are VPSs?
- In VPS, you can get own copy.
- Run multiple virtual machines in physical machine
- You get some slice of machine

Amazon EC2?
- Wonderful way to plan for unexpected growth.
- You can spawn machines automatically as your website gets popular.

How to scale your site to handle your server?

- Vertical Scaling
  CPU
    cores, L2 Cache, ..
  Disk
    PATA, SATA, SAS
    RAID
  RAM
  ...
  It is not full solution
    because at some point, you will reach the celling.
    Dual core (two processes at a time), quad core (four .. at a time) etc.

- Horizontal Scaling
  Use multiple servers
  Load balancing

Load balancing
  Client request packet arrives at the load balancer.
  Load balancer forwards the request to the least->most busiest server
  Gets back to load balancer to client

Client -> DNS server (do round robin, load balancing with BIND)

Load Balancing with Bind (round robin method):
Rotate whenever request comes in
www IN A 64.131.79.131
www IN A 64.131.79.132
www IN A 64.131.79.133
www IN A 64.131.79.134
ex) google.com, $nslookup google.com

  Bottlenecks
    - If one of the servers is used by "power user" who is doing some heavy computations,
      round robin will keep assigning the requests to the server in every rotation which may lead
      server to go down.
    - Again, if the website gets popular and one of the servers goes down, still need to fix this issue.
    - Refactorization? What if we store them into like several servers dedicated to image server, GIF server, and user server
      It does not solve the problem if the website gets popular.
    - What if the website is ecommerce? If Stephen has a shopping cart with some items, you need to make sure to subsequently
      redirect him to server1 during his session etc.
    - Store the sessions into load balancer but what if load balancer breaks due to high traffic? Does not work.

Better Approach: RAID (redundant array of independent disks)
RAID0 (striping)
  writing two identical hard drives in rotation
RAID1
  writing two identical hard drives simultaneously (adv.: if one of them shut down, still data is there)
RAID5
  nice variance of RAID1 (3 drives or 5 drives) and 1 drive is redundant
RAID6 (best choice)
  nice variance of RAID1 (3 drives or 5 drives) and 2 drives are redundant
RAID10 (cost twice as much)
  RAID0 + RAID1 (use four drives)
...

Sticky Sessions
  Shared Storage?
     FC (very fast shared storage (file server), expensive), ISCSI (shared file server, cheaper), MySQL (backend server to store metadata or session objects),
     NFS (one file server and exposing hard disk to multiple other computers), etc
  Cookies?
     store the random number in cookies that can recognized by load balancer which server to redirect.
     (what if users disable cookies... then it fails.)
Load Balancers
  Software
    ELB
    HAProxy
    LVS
    ...
  Hardware
    Barracuda
    Cisco
    Citrix
    F5

  Caching
    .html
    MySQL Query Cache
    memcached
    ...

  MySQL Query Cache
    query_cachce_type = 1

  Memcached (different server)
    $ memcache = memcache_connect(HOST,PORT);
    $ user = memcache_get($memcache,$id);
    ...
    DISK is slow.
    Database query is expensive.

Replication
  Master-Slave
  Master-Master
  partitioning
  high availability

                              Client
                             LB1 - LB2 (Big random number to remember sesson, SSL encrypted tcp80

                  www (webserver 1) www (webserver 2)

                              LB1 - LB2 (tcp3306 for mysql)

                        db1(maser) - db2(maser)






Cinchcast
  Stats
    50 milion page views a month
    50,000 hours of audio content created
    ...
    Peak rate of 40,000 concurrent requests per seconds
    Many TB/dat of data stored in MSSQL, Redis, and ElasticSearch clusters
    100 hardware nodes in production
  Hardware
    - 50 web servers
    - 15 MS SQL database servers
    - 2 Redis NOSQL keyv value servers
    - 2 NOdeJS servers
    - 2 servers for elastic search cluster
  Software and Tech Used
    - SQL server 2005 under Microsoft Windows Server 2008
    - Equalizer load balancers for load balancing
    - Redis used the distributed caching layer and for message pub-sub queue
    - NODEJS for real-time analytics and updating studio dashboard
    - ElasticSearch : for show search
  Monitoring
    - NewRelic for performance monitoring
    - Chartbeat for impact of performance on KPI (conversions, page views)
    - Gomez, WhatsupGold, Nagios for various alerting
    - SQL Monitor: from Red Gate - for SQL Server monitoring

Justin.tv
  Stats
    - 2000 incoming streams at any time
    - 30 hours per minute of video added each day
    - 30M unique vistors per month
    - Avg. live bandwidth is 45 GB per second.
    - 110 Gbps for daily peak bandwidth
    - 200 video servers. Each can send 1Gbps of video. Smaller than most CDNs yet larger than most video websites
    - 100TB of archival storage is saved per week
    - The complete video path can't have more than 250 msecs of latency before viewers start losing the ability to converse and interact in real-time.
  Software and Tech Used
  learn more:
  http://highscalability.com/blog/2010/3/16/justintvs-live-video-broadcasting-architecture.html

Play Fish
  Stats
    - 50M Monthly Active Users
    - 10M Daily Active Users
    - 100s of server Machines 
  Software and Tech Used
    - Flash on the client side
    - Java on the server side
    - PHP for tools
    - AamazonL EC2, CloudFront, S3, Hadoop/ElasticMap Reduce,
      Hive

Lessons learned from these examples:
  Redis
    - a "NoSQL" key-value data store. More precisely, it is a data structure server.
    - think of Redis as Memcached, but with built-in persistence (snapshotting or journaling to disk) and more datatypes.
    - Persistence to disk means you can use Redis as a real database instead of just a volatile cache
    - there are other powerful features like built-in pub/sub, transactions (with optimistic locking), and Lua scripting.
    - Redis is a fantastic choice if you want a highly scalable data store shared by multiple processes,
      multiple applications, or multiple servers. As just an inter-process communication mechanism it is tough to beat.
      The fact that you can communicate cross-platform, cross-server, or cross-application just as easily makes it a pretty great choice for many many use cases.
      Its speed also makes it great as a caching layer.
  Apache Hive
    - a data warehouse infrastructure built on top of Hadoop for providing data summarization, query, and analysis.
  Amazon Elastic Map Reduce
    - a managed Hadoop framework that makes it easy, fast, and cost-effective to process vast amounts of data across dynamically scalable Amazon EC2 instances.
      You can also run other popular distributed frameworks such as Apache Spark, HBase, Presto, and Flink in Amazon EMR, and interact with data in other AWS data stores such as Amazon S3 and Amazon DynamoDB.
  Nginx vs HAProxy vs AWS ELB
    - http://www.mervine.net/comparing-load-balancing
    - HAProxy has the most options in this arena, support Round-Robin, Least Connection, Weighted and more.
    - Nginx supports Round-Robin and Weighted only.
    - AWS ELB only supports Round-Robin.
  SQL vs. NoSQL
  - http://www.thegeekstuff.com/2014/01/sql-vs-nosql-db/?utm_source=tuicool

  Angular vs. React
  DOM
  - Angular creates customized Document Object Model (DOM) elements.
  - React has Virtual dom: Your changes get reflected to a virtual DOM. Then you diff that with the actual dom,
    and only update what changed. This makes updates faster.

  Data Flow
    - Angular has a two way data binding (view updates model model updates view) but React has uni-directional
    (https://medium.com/@AdamRNeary/unidirectional-data-flow-yes-flux-i-am-not-so-sure-b4acf988196c#.i8o6n8sgb) data flow.
