
Given a 2D array of digits, try to find the occurrence of a given 2D pattern of digits. For example, consider the following 2D matrix:

1234567890  
0987654321  
1111111111  
1111111111  
2222222222  
Assume we need to look for the following 2D pattern:

876543  
111111  
111111
If we scan through the original array, we observe that the 2D pattern begins at the second row and the third column of the larger grid (the 88 in the second row and third column of the larger grid is the top-left corner of the pattern we are searching for).

So, a 2D pattern of PP digits is said to be present in a larger grid GG, if the latter contains a contiguous, rectangular 2D grid of digits matching with the pattern PP, similar to the example shown above.

Input Format 
The first line contains an integer, TT, which is the number of test cases. TT test cases follow, each having a structure as described below: 
The first line contains two space-separated integers, RR and CC, indicating the number of rows and columns in the grid GG, respectively. 
This is followed by RR lines, each with a string of CC digits, which represent the grid GG. 
The following line contains two space-separated integers, rr and cc, indicating the number of rows and columns in the pattern grid PP. 
This is followed by rr lines, each with a string of cc digits, which represent the pattern PP.

Constraints 
1≤T≤51≤T≤5 
1≤R,r,C,c≤10001≤R,r,C,c≤1000 
1≤r≤R1≤r≤R 
1≤c≤C1≤c≤C
Test Case Generation 
Each individual test case has been generated by first specifying the size (RR and CC) of the large 2D matrix, and then randomly generating the digits in it. A limited number of digits in the larger matrix may be changed by the problem setter (no more than 5% of the total number of digits in the matrix). So the larger 2D matrix is almost-random. The pattern matrix has been manually-curated by the problem setter.

Output Format 
Display 'YES' or 'NO', depending on whether (or not) you find that the larger grid GG contains the rectangular pattern PP. The evaluation will be case sensitive.


import java.io.*;
import java.util.*;


My Approach:
- We have to use String.indexOf(Grid_Row) to find where the every grid row begins.
- Find the first matched row index. Then, for the rest matching rows, check if their indexes are the same as the first one.
- Make the counter that increments according to the matches. If all of the matrix are matched, then print true.

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();   //Get # of inputs
        int i,j;
        for(i = 0; i < T; ++i)//Create test cases
        {
            int R_a = sc.nextInt();    //get # of elements (rows) in a String_a array
            int C_a = sc.nextInt();    //get # of characters per row
            int R_b = sc.nextInt();    //get # of elements (rows) in a String_b array
            int C_b = sc.nextInt();    //get # of characters per row
            
            String[] array_a = new String[R_a];  //create new array_a for all the inputs 
            String[] array_b = new String[R_b];  //create new array_b for all the inputs 
        
            for(j = 0; j<R_a; ++j)
            {   
                
                if(sc.hasNext())
                {
                    String integers = sc.next();
                    if(!integers.isEmpty())
                    {
                        if(integers.length() == C_a)   //check if it matches with C
                        {
                            array_a[j] = integers;    //Store integers into element of array.
                        
                        }   //EOF check integers length
                    }//EOF check null integers
                }
                
            }//For loop for rows array_a
            
            for(j = 0; j<R_b; ++j)
            {   
                
                if(sc.hasNext())
                {
                    String integers = sc.next();
                    if(!integers.isEmpty())
                    {
                        if(integers.length() == C_b)   //check if it matches with C
                        {
                            array_b[j] = integers;    //Store integers into element of array.
                        
                        }   //EOF check integers length
                    }//EOF check null integers
                }
   
            }//For loop for rows array_b
        }//EOF for test cases
        
        
    }
}